########################################################################################################################
# .bashrc_local
#   ログインシェル起動時: ~/.bash_profile -> ~/.bashrc -> ~/bashrc_local
#   対話的シェル起動時: ~/.bashrc -> ~/bashrc_local
#   ※bashrcはUbuntuが自動生成したものを変更せずに使いたいため、bashrcにbashrc_localを読む込むようにする
########################################################################################################################

########################################################################################################################
# ソフトウェア設定
########################################################################################################################
# starshilp
if command -v starship &> /dev/null; then eval "$(starship init bash)"; fi;

# zoxide
if command -v zoxide &> /dev/null; then eval "$(zoxide init bash)"; fi;
export _ZO_DATA_DIR="$HOME/.shared_cache/zoxide/"

# volta
export VOLTA_HOME="$HOME/.shared_cache/.volta"
export PATH="$VOLTA_HOME/bin:$PATH"

# rbenv
if command -v rbenv &> /dev/null; then eval "$(rbenv init -)"; fi;
export RBENV_VERSION=3.1.2

# fzf
[ -f ~/.fzf.bash ] && source ~/.fzf.bash
HISTCONTROL=erasedups # 重複したコマンドは保存しない
export FZF_DEFAULT_OPTS='--layout=reverse'

# golang
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin

# rust
if [ -f "$HOME/.cargo/env" ]; then . "$HOME/.cargo/env"; fi;

# tfenv
export PATH="$PATH:$HOME/.tfenv/bin"

########################################################################################################################
# カスタムコマンド
########################################################################################################################
# history検索(Ctrl + r)
function _history_search() {
    local selected
    selected=$(history | sed -e 's/^[[:space:]]*[0-9]\+[[:space:]]*//' -e 's/[[:space:]]*$//' | sort -u | fzf --query "$READLINE_LINE")
    if [[ -n "$selected" ]]; then
        READLINE_LINE="$selected"
        READLINE_POINT=${#selected}
    fi
}
bind -x '"\C-r": _history_search'

# 選択したブランチに移動(gbc)
function gbc() {
    local branches selected
    branches=$(git branch --all | grep -v HEAD)
    selected=$(echo "$branches" | fzf | sed -e "s/.* //" -e "s#remotes/[^/]*/##")
    if [[ -n "$selected" ]]; then
        git checkout $selected
    fi
}

# 選択したファイルを add または unstage または delete する(gadd)
function gadd() {
    local instructions preview selected action
    instructions="Select multiple files by TAB, and then press Enter to add them."
    preview='echo {} | \
      awk "
          \$0 ~ /^[AM] / { print \"git diff --color --staged \"\$2\" | delta --side-by-side --line-numbers -w ${FZF_PREVIEW_COLUMNS:-$COLUMNS}\" }
          \$0 ~ /^ [AM]/ { print \"git diff --color \"\$2\" | delta --side-by-side --line-numbers -w ${FZF_PREVIEW_COLUMNS:-$COLUMNS}\" }
          \$0 ~ /^D /    { print \"git diff --color --staged -- \"\$2\" | delta --side-by-side --line-numbers -w ${FZF_PREVIEW_COLUMNS:-$COLUMNS}\" }
          \$0 ~ /^ D/    { print \"git diff --color -- \"\$2\" | delta --side-by-side --line-numbers -w ${FZF_PREVIEW_COLUMNS:-$COLUMNS}\" }
          \$0 ~ /^\?\? / { print \"git diff --color --no-index /dev/null \"\$2\" | delta --side-by-side --line-numbers -w ${FZF_PREVIEW_COLUMNS:-$COLUMNS}\" }" | \
      xargs -I{} bash -c {}'
    selected=$(git status -s |
               fzf -m --ansi \
                   --header="$instructions" \
                   --bind=ctrl-a:toggle-all \
                   --preview="$preview" \
                   --preview-window=up,60% |
               awk '{ print $2 }')

    if [ -z "$selected" ]; then
        echo "No files selected. Exiting."
        return 0
    fi

    echo "[a]dd or [u]nstage or [d]elete?"
    read -r -n 1 action
    case "$action" in
        a)
            git add $selected
            ;;
        u)
            git reset HEAD $selected
            ;;
        d)
            for file in $selected; do
                status=$(git status -s $file | awk '{ print substr($0, 1, 2) }')
                file=$(git status -s $file | awk '{ print substr($0, 4) }')
                if [ "$status" == "??" ]; then
                    rm $file
                else
                    git checkout -- $file
                fi
            done
            ;;
        *)
            echo "Invalid action. Exiting."
            return 1
            ;;
    esac
}

########################################################################################################################
# alias
########################################################################################################################
alias lz="lazygit"
alias dt="git difftool --tool=vimdiff"
alias g="git"

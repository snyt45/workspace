" ------------------------------------------------------------
" vim settings
" ------------------------------------------------------------
" filetype and intent
filetype plugin indent on

" highlight on
set hlsearch
set ignorecase
set smartcase
set incsearch

" enable virtual editing in rectangle visual mode
set virtualedit=block

" fold
set foldmethod=indent
set foldlevel=99

" wildmenu
set wildmenu wildoptions=pum
set wildignorecase

" no swap, backup, undo
set noswapfile
set nobackup
set noundofile

" yank send to clipboard
augroup text_yank_post
  au!
  autocmd TextYankPost * :call system('clip -i', @")
augroup END

" ------------------------------------------------------------
" cursor
" ------------------------------------------------------------
" https://qiita.com/Linda_pp/items/9e0c94eb82b18071db34
if has('vim_starting')
  let &t_SI .= "\e[6 q" " Insert mode: non-blinking vertical bar cursor
  let &t_EI .= "\e[2 q" " Normal mode: non-blinking block cursor
  let &t_SR .= "\e[4 q" " Replace mode: non-blinking underline cursor
endif

" ------------------------------------------------------------
" plugin
" ------------------------------------------------------------
" incompatible plugins
if has('syntax') && has('eval')
  packadd! matchit
end

call plug#begin('~/.shared_cache/.vim/plugged')
  Plug 'vim-jp/vimdoc-ja'
  Plug 'morhetz/gruvbox'
  Plug 'itchyny/lightline.vim'
    Plug 'shinchu/lightline-gruvbox.vim'
  Plug 'tpope/vim-fugitive'
  Plug 'airblade/vim-gitgutter'
  Plug 'tyru/caw.vim'
  Plug 'prabirshrestha/vim-lsp'
  Plug 'mattn/vim-lsp-settings'
  Plug 'prabirshrestha/asyncomplete.vim'
  Plug 'prabirshrestha/asyncomplete-lsp.vim'
  Plug 'github/copilot.vim'
call plug#end()

" auto plug install
augroup auto_plug_install
  au!
  autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
    \| PlugInstall --sync | source $MYVIMRC
  \| endif
augroup END

" ------------------------------------------------------------
" colorscheme
" ------------------------------------------------------------
set background=dark
colorscheme gruvbox

" ------------------------------------------------------------
" lightline
" ------------------------------------------------------------
if !has('gui_running')
  set t_Co=256
endif

let g:lightline = {
  \ 'colorscheme': 'gruvbox',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'gitbranch', 'readonly', 'filename', 'modified' ],
  \           ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'fugitive#head',
  \ },
  \ }

" ------------------------------------------------------------
" vimdoc-ja
" ------------------------------------------------------------
" vim help japanese
set helplang=ja,en

" ------------------------------------------------------------
" netrw
" ------------------------------------------------------------
" hidden header
let g:netrw_banner=0

" ------------------------------------------------------------
" gitgutter
" ------------------------------------------------------------
" gitgutter update faster
set updatetime=50

let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '>'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_removed_first_line = '^'
let g:gitgutter_sign_modified_removed = '<'

" ref: https://teratail.com/questions/29844#reply-46767
augroup vimrc_vim_gitgutter
  au!
  autocmd VimEnter,ColorScheme * highlight SignColumn guibg=NONE ctermbg=NONE
  autocmd VimEnter,ColorScheme * highlight GitGutterAdd guibg=NONE ctermbg=NONE guifg=#000900 ctermfg=2
  autocmd VimEnter,ColorScheme * highlight GitGutterChange guibg=NONE ctermbg=NONE guifg=#bbbb00 ctermfg=3
  autocmd VimEnter,ColorScheme * highlight GitGutterDelete guibg=NONE ctermbg=NONE guifg=#ff2222 ctermfg=1
augroup END

" ------------------------------------------------------------
" asyncomplete
" ------------------------------------------------------------
" Added key mappings for asyncomplete
imap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
imap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
imap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

let g:asyncomplete_popup_delay = 100

" ------------------------------------------------------------
" lsp
" ------------------------------------------------------------
let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_diagnostics_echo_delay = 10
let g:lsp_diagnostics_float_cursor = 1
let g:lsp_diagnostics_signs_enabled = 1
let g:lsp_diagnostics_virtual_text_enabled = 0
let g:lsp_diagnostics_signs_delay = 10
let g:lsp_diagnostics_signs_insert_mode_enabled = 0
let g:lsp_diagnostics_signs_error = {'text': '🐛'}
let g:lsp_diagnostics_signs_warning = {'text': '🪰'}
let g:lsp_diagnostics_signs_hint = {'text': '💡'}
let g:lsp_diagnostics_signs_information = {'text': 'ℹ️'}
let g:lsp_diagnostics_highlights_delay = 10
let g:lsp_diagnostics_highlights_insert_mode_enabled = 0
let g:lsp_document_code_action_signs_enabled = 0

let g:lsp_settings_servers_dir='~/.shared_cache/.vim/servers'
let g:lsp_settings_filetype_ruby = ['solargraph']

" debug
" let g:lsp_log_verbose = 1 " ログを有効にする
" let g:lsp_log_file = expand('~/.shared_cache/.vim/vim-lsp.log') " ログの出力先

" ------------------------------------------------------------
" copilot
" ------------------------------------------------------------
let g:copilot_filetypes = { 'gitcommit': v:true }

" ------------------------------------------------------------
" filetype
" ------------------------------------------------------------
augroup ts_react_add_path
  au!
  autocmd FileType typescriptreact :setl path+=**;/features/**
  autocmd FileType typescriptreact :setl includeexpr=substitute(v:fname,'^/','','')
augroup END

" ------------------------------------------------------------
" key mappings
" ------------------------------------------------------------
" leaders
let mapleader = ","

" highlight off
nmap <silent> <Esc><Esc> :<C-u>nohlsearch<CR><Esc>

" This line maps the 'q' key to a silent action
map q <silent>

" file path copy
command! CopyFilePath :echo "copied fullpath: " . expand('%:p') | let @"=expand('%:p') | call system('clip -i', @")

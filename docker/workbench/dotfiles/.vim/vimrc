" #=== Vim基本設定 {{{
" ##=== 一般設定 {{{

" リーダーキーの設定
let mapleader = ","

" ファイルタイプの検出、プラグインとインデントを有効化
filetype plugin indent on

" 検索結果をハイライト表示
set hlsearch

" 検索時に大文字小文字を区別しない
set ignorecase

" 検索パターンに大文字を含む場合は大文字小文字を区別
set smartcase

" インクリメンタルサーチを有効化（検索文字入力時に随時検索）
set incsearch

" 矩形選択時の仮想編集を有効化
set virtualedit=block

" インデントに基づいて折りたたみを行う
set foldmethod=indent

" デフォルトですべての折りたたみを開く
set foldlevel=99

" 補完メニューを改善
set wildmenu wildoptions=pum

" ファイル名補完で大文字小文字を区別しない
set wildignorecase

" 行番号を相対的に表示
set relativenumber

" スワップファイルを作成しない
set noswapfile

" バックアップファイルを作成しない
set nobackup

" アンドゥファイルを作成しない
set noundofile

" マウス操作を有効化
set mouse=a

" デフォルトシェルの設定
set shell=bash

" ヤンクをクリップボードに送信
augroup text_yank_post
  au!
  autocmd TextYankPost * :call system('clip -i', @")
augroup END

" vimrc編集時のみmarkerベースの折りたたみを有効化
augroup vimrc_folding
  autocmd!
  autocmd FileType vim
        \ if expand('%:t') ==# 'vimrc' |
        \   setlocal foldmethod=marker |
        \   setlocal foldlevel=0 |
        \ endif
augroup END

" ##=== }}}
" ##=== カーソル設定 {{{

" Vimの起動時のカーソル設定
if has('vim_starting')
  " 挿入モード時: 非点滅の縦棒カーソル
  let &t_SI .= "\e[6 q"
  " ノーマルモード時: 非点滅のブロックカーソル
  let &t_EI .= "\e[2 q"
  " 置換モード時: 非点滅の下線カーソル
  let &t_SR .= "\e[4 q"
endif

" ##=== }}}
" ##=== インデント設定 {{{

augroup fileTypeIndent
  autocmd!
  " 2スペースインデント
  autocmd FileType ruby,typescript,javascript,typescriptreact,vim,yaml,yml,json,css
        \ setlocal expandtab shiftwidth=2 softtabstop=2

  " Go言語のみタブインデント（go fmt標準）
  autocmd FileType go setlocal noexpandtab shiftwidth=4 softtabstop=4 tabstop=4
augroup END

" ##=== }}}
" ##=== 検索パス {{{

" 検索パスの設定
set path+=api/.,api/app/**,api/bin/**,api/config/**,api/db/**,api/gen/**,api/lib/**,api/spec/**
set path+=frontend/.,frontend/src/**,frontend/tests/**

" 検索から除外するパターン
set wildignore+=**/node_modules/**,**/tmp/**,**/dist/**,**/build/**,**/.git/**
set wildignore+=*.log,*.tmp
set wildignore+=*.png,*.jpg,*.gif,*.pdf
set wildignore+=*.zip,*.tar.gz

" TypeScript React用のパス設定
augroup ts_react_add_path
  au!
  " featuresディレクトリ以下のパスを検索対象に追加
  autocmd FileType typescriptreact :setl path+=/features/**
  " インクルード式の変換設定（先頭の/を除去）
  autocmd FileType typescriptreact :setl includeexpr=substitute(v:fname,'^/','','')
augroup END

" ##=== }}}
" ##=== セッション設定 {{{

" セッションの復元コマンド
command! RestoreSession :source ~/.shared_cache/.vim/.session
" セッションの保存コマンド
command! SaveSession    :mksession! ~/.shared_cache/.vim/.session

" ##=== }}}
" ##=== キーマッピング設定 {{{

" 検索ハイライトを消去
nmap <silent> <Esc><Esc> :<C-u>nohlsearch<CR><Esc>

" vimrcを開く
nmap <leader>v :e $MYVIMRC<CR>

" qキーを無効化
map q <silent>

" quickfixの次のエラーへ移動
nnoremap <silent> cn :cn<CR>
" quickfixの前のエラーへ移動
nnoremap <silent> cp :cp<CR>

" Quickfixウィンドウの表示切り替え関数
function! ToggleQuickFix()
  if empty(filter(getwininfo(), 'v:val.quickfix'))
    copen
  else
    cclose
  endif
endfunction

" Quickfixウィンドウの表示切り替え
nnoremap <leader>w :call ToggleQuickFix()<cr>

" Git管理下のファイルの相対パスをクリップボードにコピー
command! CopyGitPath :let @"='.' . substitute(expand('%:p'), trim(system('git rev-parse --show-toplevel')), '', '') | echo @" | call system('clip -i', @")
nnoremap <leader>c :CopyGitPath<cr>

" 現在のバッファを閉じる
nnoremap <leader>d :bd<cr>

" Git PR関連機能
" カーソル位置のコミットハッシュに関連するPRを表示
function! GitShowCursorPullRequest()
  let l:word = expand('<cword>')
  let l:get_pr_number = "gh api graphql
      \ -F owner=':owner' -F repo=':repo' -F hash=" . l:word . "
      \ -f query='query($repo:String!, $owner:String!, $hash:String) { repository(name: $repo, owner: $owner) { object(expression: $hash) { ... on Commit {associatedPullRequests(first: 1) { edges { node { number } } } } } } }'
      \ | jq '.data.repository.object.associatedPullRequests.edges[0].node.number'"
  let l:pr_number = system(l:get_pr_number)

  echo "pr_number: " . l:pr_number
  if match(l:pr_number, 'null\n') != -1
    echo "Pull Request not found."
    return
  endif

  let l:get_pr_url = "gh api graphql
      \ -F owner=':owner' -F repo=':repo' -F number=" . str2nr(l:pr_number) . "
      \ -f query='query($repo:String!, $owner:String!, $number:Int!) { repository(name: $repo, owner: $owner) { pullRequest(number: $number) { url } } }'
      \ | jq '.data.repository.pullRequest.url'"
  let l:pr_url = system(l:get_pr_url)
  echo "open: " . l:pr_url | let @"=l:pr_url | call system('chrome -i', @")
endfunction

" PRを表示するコマンドを定義
command! ShowPullRequest :call GitShowCursorPullRequest()
" PRを表示するキーマッピング
nnoremap go :ShowPullRequest<cr>

" Specファイル関連の機能
" 対応するspecファイルを開くコマンド
command! OpenSpec :call OpenSpecFile()

" Specファイルを開く関数
function! OpenSpecFile()
  " 現在のファイルパスを取得
  let current_file = expand('%:p')
  " app/ を spec/ に置換し、末尾に _spec を追加
  let spec_file = substitute(current_file, '/app/', '/spec/', '')
  let spec_file = substitute(spec_file, '\.rb$', '_spec.rb', '')

  " ファイルが存在するか確認して開く
  if filereadable(spec_file)
    execute 'edit ' . spec_file
  else
    echo "Spec file not found: " . spec_file
  endif
endfunction

" 実装ファイルを開くコマンド
command! OpenImplementation :call OpenImplementationFile()

" 実装ファイルを開く関数
function! OpenImplementationFile()
  " 現在のファイルパスを取得
  let current_file = expand('%:p')
  " spec/ を app/ に置換し、_spec.rb を .rb に変更
  let impl_file = substitute(current_file, '/spec/', '/app/', '')
  let impl_file = substitute(impl_file, '_spec\.rb$', '.rb', '')

  " ファイルが存在するか確認して開く
  if filereadable(impl_file)
    execute 'edit ' . impl_file
  else
    echo "Implementation file not found: " . impl_file
  endif
endfunction

" ##=== }}}
" ##=== ctags {{{

" タグファイルの検索パス（カレントディレクトリから親ディレクトリに向かって検索）
set tags=.tags;$HOME

" ctagsのオプションを共通定義
let s:ctags_options = '--exclude=node_modules --exclude=.git --exclude=*.css --exclude=*.json -R -f '

" タグファイル生成コマンド
command! MakeTags call system('ctags ' . s:ctags_options . '.tags')

" タグファイルの自動更新機能
function! s:execute_ctags() abort
  let tag_name = '.tags'
  let tags_path = findfile(tag_name, '.;')
  if tags_path ==# ''
    return
  endif

  " タグファイルのディレクトリパスを取得
  let tags_dirpath = fnamemodify(tags_path, ':p:h')
  " 見つかったタグファイルのディレクトリに移動して、ctagsをバックグラウンド実行（エラー出力破棄）
  execute 'silent !cd' tags_dirpath '&& ctags ' . s:ctags_options . tag_name . ' 2> /dev/null &'
endfunction

" ファイル保存時にタグファイルを自動更新
augroup update_ctags
  au!
  autocmd BufWritePost * call s:execute_ctags()
augroup END

" タグジャンプ時に複数候補がある場合はリスト表示
nnoremap <C-]> g<C-]>

" ##=== }}}
" #=== }}}

" #=== プラグイン設定 {{{
" ##=== プラグインマネージャー {{{

if has('syntax') && has('eval')
  packadd! matchit
end

call plug#begin('~/.shared_cache/.vim/plugged')
  " 日本語ヘルプ
  Plug 'vim-jp/vimdoc-ja'
  " カラースキーム
  Plug 'morhetz/gruvbox'
  " ステータスライン
  Plug 'itchyny/lightline.vim'
    " Lightline用のGruvboxテーマ
    Plug 'shinchu/lightline-gruvbox.vim'
    " Lightline用のGitブランチ表示
    Plug 'itchyny/vim-gitbranch'
  " ファイルファインダー
  Plug 'ctrlpvim/ctrlp.vim'
    " あいまい検索機能の強化
    Plug 'mattn/ctrlp-matchfuzzy'
    " コマンドランチャー機能
    Plug 'mattn/ctrlp-launcher'
  " Git差分表示
  Plug 'airblade/vim-gitgutter'
  " コメントアウト
  Plug 'tyru/caw.vim'
  " LSPクライアント
  Plug 'prabirshrestha/vim-lsp'
  " LSP設定管理
  Plug 'mattn/vim-lsp-settings'
  " 非同期補完
  Plug 'prabirshrestha/asyncomplete.vim'
  " LSPによる補完
  Plug 'prabirshrestha/asyncomplete-lsp.vim'
  " コード実行
  Plug 'thinca/vim-quickrun'
  " Denops（Deno製プラグイン基盤）
  Plug 'vim-denops/denops.vim'
  " インデントガイド
  Plug 'nathanaelkane/vim-indent-guides'
call plug#end()

" 未インストールのプラグインを自動インストール
augroup auto_plug_install
  au!
  autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
    \| PlugInstall --sync | source $MYVIMRC
  \| endif
augroup END

" ##=== }}}
" ##=== カラースキーム設定 {{{

" ダークモードを使用
set background=dark
" gruvboxカラースキームを適用
colorscheme gruvbox

" ##=== }}}
" ##=== lightline.vim {{{

" 常にステータスラインを表示
set laststatus=2

" GUIでない場合は256色を有効化
if !has('gui_running')
  set t_Co=256
endif

" Lightlineの詳細設定
let g:lightline = {
  \ 'colorscheme': 'gruvbox',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'gitbranch', 'readonly', 'filename', 'modified' ],
  \           ],
  \   'right': [
  \     ['lineinfo'],
  \     ['percent'],
  \     ['fileformat', 'fileencoding', 'filetype', 'winbufnr']
  \   ]
  \ },
  \ 'inactive': {
  \   'right': [ [ 'lineinfo' ],
  \              [ 'percent' ],
  \              [ 'winbufnr' ] ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'gitbranch#name',
  \ },
  \ 'component': {
  \   'winbufnr': 'win:%{winnr()} buf:%n'
  \ },
  \ }

" ##=== }}}
" ##=== vim-indent-guides {{{

" Vim起動時にインデントガイドを有効化
let g:indent_guides_enable_on_vim_startup = 1

" インデントガイドを表示し始めるレベル (2から開始)
let g:indent_guides_start_level = 2

" ガイドラインの幅を1文字分に設定
let g:indent_guides_guide_size = 1

" ##=== }}}
" ##=== ctrlp {{{

" あいまい検索機能の設定
let g:ctrlp_match_func = {'match': 'ctrlp_matchfuzzy#matcher'}
" 起動キーマッピング
let g:ctrlp_map = '<leader><leader>'
" Gitリポジトリ内のファイル一覧を取得するコマンド
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

" バッファリストの表示
nnoremap <leader>b :CtrlPBuffer<cr>
" タグリストの表示
nnoremap <leader>t :CtrlPTag<cr>
" 現在のファイルのタグ一覧
nnoremap <leader>f :CtrlPBufTag<cr>
" Quickfixリストの表示
nnoremap <leader>q :CtrlPQuickfix<cr>
" 最近使用したファイルの一覧
nnoremap <leader>m :CtrlPMRUFiles<cr>

" ##=== }}}
" ##=== ctrlp-launcher {{{

" 起動キーマッピング
nnoremap <leader>e :<c-u>CtrlPLauncher<cr>
" ランチャー設定ファイルの場所を指定
let g:ctrlp_launcher_file = '~/.vim/config/.ctrlp-launcher'

" ##=== }}}
" ##=== vimdoc-ja {{{

" ヘルプの言語優先順位を設定（日本語を優先）
set helplang=ja,en

" ##=== }}}
" ##=== netrw {{{

" ツリー表示形式を標準に設定
let g:netrw_liststyle = 3
" バナーを非表示
let g:netrw_banner = 0
" プレビューウィンドウのサイズ
let g:netrw_winsize = 25

" Netrwの表示状態管理用フラグ
let g:NetrwIsOpen = 0

" Netrwをトグルで表示/非表示する関数
function! ToggleNetrw() abort
   if g:NetrwIsOpen
       " 開いている場合は閉じる
       let i = bufnr("$")
       while (i >= 1)
           if (getbufvar(i, "&filetype") == "netrw")
               silent exe "bwipeout " . i
           endif
           let i-=1
       endwhile
       let g:NetrwIsOpen = 0
   else
       " 閉じている場合は開く
       let g:NetrwIsOpen = 1
       silent Vex
   endif
endfunction

" ファイルパス取得関数
function! s:GetNetrwPath() abort
   " 現在のディレクトリツリーのパスを取得
   let l:dirpath = netrw#Call('NetrwTreePath', w:netrw_treetop)
   " カーソル位置のアイテム名を取得
   let l:filename = netrw#Call('NetrwGetWord')
   
   " ディレクトリの場合はディレクトリパスのみを返す
   " ファイルの場合はディレクトリパスとファイル名を結合
   return l:filename =~ '/$' ? l:dirpath : l:dirpath . '/' . l:filename
endfunction

" エンターキー押下時の処理
function! s:HandleEnter() abort
   let l:path = s:GetNetrwPath()

   if isdirectory(l:path)
       " ディレクトリの場合は標準のnetrw操作を実行
       execute "normal \<Plug>NetrwLocalBrowseCheck"
       return
   endif

   " ファイルの場合は指定ウィンドウで開く
   call s:OpenFileInSharedWindow('edit')
endfunction

" ファイルを開く処理
function! s:OpenFileInSharedWindow(mode) abort
   let l:path = s:GetNetrwPath()
   " 前回のウィンドウ番号を取得
   let l:prevwin = winnr('#')

   " ウィンドウが存在しない場合は新規作成
   if l:prevwin == 0
       vertical rightbelow new
       vertical resize 80
   else
       " 既存のウィンドウを使用
       execute l:prevwin . 'wincmd w'
   endif

   " ファイルを開く
   execute 'edit ' . fnameescape(l:path)

   " プレビューモードの場合はnetrwに戻る
   if a:mode ==# 'preview'
       wincmd p
   endif
endfunction

" キーマッピングの設定
function! s:set_netrw_mappings() abort
   if !exists('g:loaded_netrwPlugin')
       return
   endif
   " プレビュー表示用のマッピング
   nmap <buffer> p :call <SID>OpenFileInSharedWindow('preview')<CR>
   " エンターキーの動作設定
   nmap <buffer> <CR> :call <SID>HandleEnter()<CR>
endfunction

" Netrw初期設定
augroup InitNetrw
   autocmd!
   autocmd FileType netrw call s:set_netrw_mappings()
augroup END

" == でnetrwをトグル表示
noremap <silent>== :call ToggleNetrw()<CR>

" ##=== }}}
" ##=== gitgutter {{{

" 差分更新の間隔を短く設定
set updatetime=50

" 差分表示のサイン設定
" 追加行のサイン
let g:gitgutter_sign_added = '+'
" 変更行のサイン
let g:gitgutter_sign_modified = '>'
" 削除行のサイン
let g:gitgutter_sign_removed = '-'
" 最初の行が削除された場合のサイン
let g:gitgutter_sign_removed_first_line = '^'
" 変更して削除された行のサイン
let g:gitgutter_sign_modified_removed = '<'

" GitGutterの見た目のカスタマイズ
augroup vimrc_vim_gitgutter
  au!
  " サイン列の背景色を削除
  autocmd VimEnter,ColorScheme * highlight SignColumn guibg=NONE ctermbg=NONE
  " 追加行の色設定
  autocmd VimEnter,ColorScheme * highlight GitGutterAdd guibg=NONE ctermbg=NONE guifg=#000900 ctermfg=2
  " 変更行の色設定
  autocmd VimEnter,ColorScheme * highlight GitGutterChange guibg=NONE ctermbg=NONE guifg=#bbbb00 ctermfg=3
  " 削除行の色設定
  autocmd VimEnter,ColorScheme * highlight GitGutterDelete guibg=NONE ctermbg=NONE guifg=#ff2222 ctermfg=1
augroup END

" ##=== }}}
" ##=== asyncomplete {{{

" 補完メニューが表示されている場合は次の候補を選択、そうでなければTabを入力
imap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
" 補完メニューが表示されている場合は前の候補を選択、そうでなければShift+Tabを入力
imap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" 補完メニューが表示されている場合は補完を確定、そうでなければ改行
imap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

" 補完ポップアップの表示遅延時間（ミリ秒）
let g:asyncomplete_popup_delay = 100

" ##=== }}}
" ##=== vim-lsp {{{

" 診断機能を有効化
let g:lsp_diagnostics_enabled = 1
" カーソル下の診断メッセージをエコーエリアに表示
let g:lsp_diagnostics_echo_cursor = 1
" 診断メッセージの表示遅延時間
let g:lsp_diagnostics_echo_delay = 10
" カーソル下の診断をフロート表示
let g:lsp_diagnostics_float_cursor = 1
" サイン列での診断表示を有効化
let g:lsp_diagnostics_signs_enabled = 1
" 仮想テキストでの診断表示を無効化
let g:lsp_diagnostics_virtual_text_enabled = 0
" サイン表示の遅延時間
let g:lsp_diagnostics_signs_delay = 10
" 挿入モード時のサイン表示を無効化
let g:lsp_diagnostics_signs_insert_mode_enabled = 0
" 診断のハイライト遅延時間
let g:lsp_diagnostics_highlights_delay = 10
" 挿入モード時の診断ハイライトを無効化
let g:lsp_diagnostics_highlights_insert_mode_enabled = 0
" コードアクションのサイン表示を無効化
let g:lsp_document_code_action_signs_enabled = 0

" LSPサーバーの設定
" サーバーのインストールディレクトリ
let g:lsp_settings_servers_dir='~/.shared_cache/.vim/servers'
" Rubyのサーバー設定
let g:lsp_settings_filetype_ruby = ['solargraph']

" デバッグ設定（必要な場合にコメントを解除）
" let g:lsp_log_verbose = 1
" let g:lsp_log_file = expand('~/.shared_cache/.vim/vim-lsp.log')

" LSPバッファが有効になったときの設定
function! s:on_lsp_buffer_enabled() abort
  " フォーマット時のタイムアウト設定
  let g:lsp_format_sync_timeout = 1000

  " Goファイル用の自動フォーマット設定
  " ファイル保存時にインポートの整理とコードフォーマットを実行
  autocmd BufWritePre *.go call execute(['LspCodeActionSync source.organizeImports', 'LspDocumentFormatSync'])
endfunction

" LSPの初期化設定
augroup lsp_install
  au!
  " LSPバッファが有効になったときに実行する関数を設定
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" ##=== }}}
" ##=== QuickRun {{{

" QuickRunの基本設定
let g:quickrun_config = {}

" Go言語用の実行設定
let g:quickrun_config['go'] = {
    \ 'command': 'go',
    \ 'cmdopt': 'run',
    \ 'exec': 'go run %S'
    \ }

" ##=== }}}

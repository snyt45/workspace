" ------------------------------------------------------------
" vim settings
" ------------------------------------------------------------
" leaders
let mapleader = ","

" filetype and intent
filetype plugin indent on

" highlight on
set hlsearch
set ignorecase
set smartcase
set incsearch

" enable virtual editing in rectangle visual mode
set virtualedit=block

" fold
set foldmethod=indent
set foldlevel=99

" wildmenu
set wildmenu wildoptions=pum
set wildignorecase

" no swap, backup, undo
set noswapfile
set nobackup
set noundofile

" mouse on
set mouse=a

" default shell
set shell=bash

" yank send to clipboard
augroup text_yank_post
  au!
  autocmd TextYankPost * :call system('clip -i', @")
augroup END

" ------------------------------------------------------------
" cursor
" ------------------------------------------------------------
" https://qiita.com/Linda_pp/items/9e0c94eb82b18071db34
if has('vim_starting')
  let &t_SI .= "\e[6 q" " Insert mode: non-blinking vertical bar cursor
  let &t_EI .= "\e[2 q" " Normal mode: non-blinking block cursor
  let &t_SR .= "\e[4 q" " Replace mode: non-blinking underline cursor
endif

" ------------------------------------------------------------
" plugin
" ------------------------------------------------------------
" incompatible plugins
if has('syntax') && has('eval')
  packadd! matchit
end

call plug#begin('~/.shared_cache/.vim/plugged')
  Plug 'vim-jp/vimdoc-ja'
  Plug 'morhetz/gruvbox'
  Plug 'itchyny/lightline.vim'
    Plug 'shinchu/lightline-gruvbox.vim'
  Plug 'ctrlpvim/ctrlp.vim'
    Plug 'mattn/ctrlp-matchfuzzy'
    Plug 'mattn/ctrlp-launcher'
  Plug 'tpope/vim-fugitive'
  Plug 'airblade/vim-gitgutter'
  Plug 'tyru/caw.vim'
  Plug 'prabirshrestha/vim-lsp'
  Plug 'mattn/vim-lsp-settings'
  Plug 'prabirshrestha/asyncomplete.vim'
  Plug 'prabirshrestha/asyncomplete-lsp.vim'
  Plug 'thinca/vim-quickrun'
  Plug 'vim-denops/denops.vim'
  Plug 'Shougo/ddu.vim'
call plug#end()

" auto plug install
augroup auto_plug_install
  au!
  autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
    \| PlugInstall --sync | source $MYVIMRC
  \| endif
augroup END

" ------------------------------------------------------------
" colorscheme
" ------------------------------------------------------------
set background=dark
colorscheme gruvbox

" ------------------------------------------------------------
" lightline
" ------------------------------------------------------------
set laststatus=2

if !has('gui_running')
  set t_Co=256
endif

let g:lightline = {
  \ 'colorscheme': 'gruvbox',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'gitbranch', 'readonly', 'filename', 'modified' ],
  \           ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'fugitive#head',
  \ },
  \ }

" ------------------------------------------------------------
" ctrlp
" ------------------------------------------------------------
let g:ctrlp_match_func = {'match': 'ctrlp_matchfuzzy#matcher'}
let g:ctrlp_map = '<leader><leader>'
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
nnoremap <leader>b :CtrlPBuffer<cr>
nnoremap <leader>t :CtrlPTag<cr>
nnoremap <leader>f :CtrlPBufTag<cr>
nnoremap <leader>q :CtrlPQuickfix<cr>
nnoremap <leader>m :CtrlPMRUFiles<cr>

" ------------------------------------------------------------
" ctrlp-launcher
" ------------------------------------------------------------
nnoremap <leader>e :<c-u>CtrlPLauncher<cr>
let g:ctrlp_launcher_file = '~/.vim/config/.ctrlp-launcher'

" ------------------------------------------------------------
" ctags
" ------------------------------------------------------------
" see: https://qiita.com/aratana_tamutomo/items/59fb4c377863a385e032
set tags=.tags;$HOME

" ctagsのオプションを共通定義
let s:ctags_options = '--exclude=node_modules --exclude=.git --exclude=*.css --exclude=*.json -R -f '

" タグ生成コマンド
command! MakeTags call system('ctags ' . s:ctags_options . '.tags')

function! s:execute_ctags() abort
  let tag_name = '.tags'
  let tags_path = findfile(tag_name, '.;')
  if tags_path ==# ''
    return
  endif

  " タグファイルのディレクトリパスを取得
  " `:p:h`の部分は、:h filename-modifiersで確認
  let tags_dirpath = fnamemodify(tags_path, ':p:h')
  " 見つかったタグファイルのディレクトリに移動して、ctagsをバックグラウンド実行（エラー出力破棄）
  execute 'silent !cd' tags_dirpath '&& ctags ' . s:ctags_options . tag_name . ' 2> /dev/null &'
endfunction

augroup update_ctags
  au!
  autocmd BufWritePost * call s:execute_ctags()
augroup END

" ------------------------------------------------------------
" denops
" ------------------------------------------------------------

" ------------------------------------------------------------
" vimdoc-ja
" ------------------------------------------------------------
" vim help japanese
set helplang=ja,en

" ------------------------------------------------------------
" netrw
" ------------------------------------------------------------
" hidden header
let g:netrw_banner=0

let g:NetrwIsOpen=0
function! ToggleNetrw()
    let g:netrw_winsize = 25
    let g:netrw_alto = 1
    let g:netrw_browse_split = 4

    if g:NetrwIsOpen
        let i = bufnr("$")
        while (i >= 1)
            if (getbufvar(i, "&filetype") == "netrw")
                silent exe "bwipeout " . i
            endif
            let i-=1
        endwhile
        let g:NetrwIsOpen=0
    else
        let g:NetrwIsOpen=1
        silent Vex
    endif
endfunction

"ショートカットの設定
"= を 2 回連続押下で toggle
noremap <silent>== :call ToggleNetrw()<CR>

" ------------------------------------------------------------
" gitgutter
" ------------------------------------------------------------
" gitgutter update faster
set updatetime=50

let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '>'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_removed_first_line = '^'
let g:gitgutter_sign_modified_removed = '<'

" ref: https://teratail.com/questions/29844#reply-46767
augroup vimrc_vim_gitgutter
  au!
  autocmd VimEnter,ColorScheme * highlight SignColumn guibg=NONE ctermbg=NONE
  autocmd VimEnter,ColorScheme * highlight GitGutterAdd guibg=NONE ctermbg=NONE guifg=#000900 ctermfg=2
  autocmd VimEnter,ColorScheme * highlight GitGutterChange guibg=NONE ctermbg=NONE guifg=#bbbb00 ctermfg=3
  autocmd VimEnter,ColorScheme * highlight GitGutterDelete guibg=NONE ctermbg=NONE guifg=#ff2222 ctermfg=1
augroup END

" ------------------------------------------------------------
" asyncomplete
" ------------------------------------------------------------
" Added key mappings for asyncomplete
imap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
imap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
imap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

let g:asyncomplete_popup_delay = 100

" ------------------------------------------------------------
" lsp
" ------------------------------------------------------------
let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_diagnostics_echo_delay = 10
let g:lsp_diagnostics_float_cursor = 1
let g:lsp_diagnostics_signs_enabled = 1
let g:lsp_diagnostics_virtual_text_enabled = 0
let g:lsp_diagnostics_signs_delay = 10
let g:lsp_diagnostics_signs_insert_mode_enabled = 0
" let g:lsp_diagnostics_signs_error = {'text': '🐛'}
" let g:lsp_diagnostics_signs_warning = {'text': '🪰'}
" let g:lsp_diagnostics_signs_hint = {'text': '💡'}
" let g:lsp_diagnostics_signs_information = {'text': 'ℹ️'}
let g:lsp_diagnostics_highlights_delay = 10
let g:lsp_diagnostics_highlights_insert_mode_enabled = 0
let g:lsp_document_code_action_signs_enabled = 0

let g:lsp_settings_servers_dir='~/.shared_cache/.vim/servers'
let g:lsp_settings_filetype_ruby = ['solargraph']

" debug
" let g:lsp_log_verbose = 1 " ログを有効にする
" let g:lsp_log_file = expand('~/.shared_cache/.vim/vim-lsp.log') " ログの出力先

" vim-lsp がバッファで有効になったときに実行される関数
" バッファローカルなキーバインドやオプションを指定
" See: https://mattn.kaoriya.net/software/vim/20191231213507.htm
function! s:on_lsp_buffer_enabled() abort
  let g:lsp_format_sync_timeout = 1000

  " golang
  " バッファ保存時に毎回「import補完」と「コードフォーマット」を実行
  autocmd BufWritePre *.go call execute(['LspCodeActionSync source.organizeImports', 'LspDocumentFormatSync'])
endfunction

augroup lsp_install
  au!
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" ------------------------------------------------------------
" session
" ------------------------------------------------------------
" augroup SessionAutocommands
"   au!
" 
"   autocmd VimEnter * nested call <SID>RestoreSessionWithConfirm()
"   autocmd VimLeave * execute 'SaveSession'
" augroup END

command! RestoreSession :source ~/.shared_cache/.vim/.session
command! SaveSession    :mksession! ~/.shared_cache/.vim/.session

" Restore session with confirm
" function! s:RestoreSessionWithConfirm()
"   let msg = 'Do you want to restore previous session?'
" 
"   if !argc() && confirm(msg, "&Yes\n&No", 1, 'Question') == 1
"     execute 'RestoreSession'
"   endif
" endfunction

" ------------------------------------------------------------
" QuickRun
" ------------------------------------------------------------
let g:quickrun_config = {}
let g:quickrun_config['go'] = {
    \ 'command': 'go',
    \ 'cmdopt': 'run',
    \ 'exec': 'go run %S'
    \ }

" ------------------------------------------------------------
" filetype
" ------------------------------------------------------------
augroup ts_react_add_path
  au!
  autocmd FileType typescriptreact :setl path+=**;/features/**
  autocmd FileType typescriptreact :setl includeexpr=substitute(v:fname,'^/','','')
augroup END

" ------------------------------------------------------------
" key mappings
" ------------------------------------------------------------
" highlight off
nmap <silent> <Esc><Esc> :<C-u>nohlsearch<CR><Esc>

" vimrcを開く
nmap <leader>v :e $MYVIMRC<CR>

" This line maps the 'q' key to a silent action
map q <silent>

" file path copy
command! CopyFilePath :echo "copied fullpath: " . expand('%:p') | let @"=expand('%:p') | call system('clip -i', @")
nnoremap <leader>c :CopyFilePath<cr>

" quickfix
nnoremap <silent> cn :cn<CR>
nnoremap <silent> cp :cp<CR>

" buffers and quickfix
function! ToggleQuickFix()
  if empty(filter(getwininfo(), 'v:val.quickfix'))
    copen
  else
    cclose
  endif
endfunction
nnoremap <leader>w :call ToggleQuickFix()<cr>
nnoremap <leader>d :bd<cr>

" searching ang grepping
nnoremap <leader>g :copen<cr>:Ggrep!<SPACE>
nnoremap K :Ggrep "\b<C-R><C-W>\b"<cr>:cw<cr>

" ctags
nnoremap <C-]> g<C-]>

function! GitShowCursorPullRequest()
  let l:word = expand('<cword>')
  let l:get_pr_number = "gh api graphql
      \ -F owner=':owner' -F repo=':repo' -F hash=" . l:word . "
      \ -f query='query($repo:String!, $owner:String!, $hash:String) { repository(name: $repo, owner: $owner) { object(expression: $hash) { ... on Commit {associatedPullRequests(first: 1) { edges { node { number } } } } } } }'
      \ | jq '.data.repository.object.associatedPullRequests.edges[0].node.number'"
  let l:pr_number = system(l:get_pr_number)

  echo "pr_number: " . l:pr_number
  if match(l:pr_number, 'null\n') != -1
    echo "Pull Request not found."
    return
  endif

  let l:get_pr_url = "gh api graphql
      \ -F owner=':owner' -F repo=':repo' -F number=" . str2nr(l:pr_number) . "
      \ -f query='query($repo:String!, $owner:String!, $number:Int!) { repository(name: $repo, owner: $owner) { pullRequest(number: $number) { url } } }'
      \ | jq '.data.repository.pullRequest.url'"
  let l:pr_url = system(l:get_pr_url)
  echo "open: " . l:pr_url | let @"=l:pr_url | call system('chrome -i', @")
endfunction

command! ShowPullRequest :call GitShowCursorPullRequest()
nnoremap go :ShowPullRequest<cr>
